name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Checkout existing gh-pages for preservation
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-existing
        continue-on-error: true
        
      - name: Create preview deployment structure
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy existing gh-pages content to preserve main branch app and other PR previews
          if [ -d "gh-pages-existing" ]; then
            cp -r gh-pages-existing/* deploy/ 2>/dev/null || true
          fi
          
          # Create the PR preview directory and copy current PR files (exclude hidden files and deployment directories)
          mkdir -p deploy/pr-${{ github.event.number }}
          cp -r *.html *.css *.js *.json *.md js/ pages/ deploy/pr-${{ github.event.number }}/ 2>/dev/null || true
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: deploy
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}/`;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ **PR Preview deployed!**')
            );
            
            const commentBody = `ðŸš€ **PR Preview deployed!**
            
            You can preview this PR at: **${previewUrl}**
            
            The preview will update automatically when you push new commits to this PR.
            
            ---
            *This comment was automatically generated by the PR Preview workflow.*`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }