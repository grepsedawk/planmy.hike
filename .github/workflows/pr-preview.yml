name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Checkout main branch for existing pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true
        
      - name: Create preview directory structure
        run: |
          # Create the preview directory if it doesn't exist
          mkdir -p gh-pages/pr-${{ github.event.number }}
          
          # Copy the current PR files to the preview directory
          find . -maxdepth 1 -not -name gh-pages -not -name . -not -name .git -exec cp -r {} gh-pages/pr-${{ github.event.number }}/ \;
          
          # Create an index.html for the root if it doesn't exist
          if [ ! -f gh-pages/index.html ]; then
            cat > gh-pages/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>PR Previews - planmy.hike</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .preview-link { display: block; margin: 10px 0; padding: 10px; border: 1px solid #ddd; text-decoration: none; color: #333; }
              .preview-link:hover { background-color: #f5f5f5; }
            </style>
          </head>
          <body>
            <h1>PR Previews</h1>
            <p>This page lists all active PR previews for the planmy.hike repository.</p>
            <div id="previews"></div>
            <script>
              // Auto-discover PR preview directories
              fetch('./')
                .then(response => response.text())
                .then(html => {
                  const matches = html.match(/href="pr-\d+\/"/g) || [];
                  const previews = matches.map(match => match.slice(6, -2));
                  const container = document.getElementById('previews');
                  if (previews.length === 0) {
                    container.innerHTML = '<p>No active PR previews found.</p>';
                  } else {
                    container.innerHTML = previews.map(pr => 
                      `<a href="${pr}/" class="preview-link">Preview for ${pr.toUpperCase()}</a>`
                    ).join('');
                  }
                })
                .catch(() => {
                  document.getElementById('previews').innerHTML = '<p>Unable to load preview list.</p>';
                });
            </script>
          </body>
          </html>
          EOF
          fi
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}/`;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸš€ **PR Preview deployed!**')
            );
            
            const commentBody = `ðŸš€ **PR Preview deployed!**
            
            You can preview this PR at: **${previewUrl}**
            
            The preview will update automatically when you push new commits to this PR.
            
            ---
            *This comment was automatically generated by the PR Preview workflow.*`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }